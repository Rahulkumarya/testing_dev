"use client";
// import type { Metadata } from "next";
// import { Inter } from "next/font/google";
import "./globals.css";

//import font family
import { Poppins } from "next/font/google";
import { Josefin_Sans } from "next/font/google";

import { Toaster } from "react-hot-toast";
import Providers from "./Provider";
import { SessionProvider } from "next-auth/react";
import React, { FC } from "react";
import { useLoadUserQuery } from "@/redux/features/api/apiSlice";
import Loader from "./component/Loader/Loader";
// import Header from "./services/components/SeviceHeader"


import Header from "./patient/component/Header";
import { SocketProvider } from "./context/SocketContext";
const poppins = Poppins({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
  variable: "--font-Poppins",
});

const josefin = Josefin_Sans({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
  variable: "--font-Josefin",
});

// const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      {/* dark mode logic in here  */}
      <body
        className={`${poppins.variable} ${josefin.variable} bg-white bg-no-repeat   duration-300 `}
      >
        <Providers>
          <SessionProvider>
          <SocketProvider>
  
              <Custom>{children}</Custom>
              <Toaster position="top-center" reverseOrder={false} />
              </SocketProvider>
          </SessionProvider>
        </Providers>
      </body>
    </html>
  );
}

const Custom: FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isLoading } = useLoadUserQuery({});
 
  return (
    <>
      {isLoading ? (
        <Loader />
      ) : (
        <>
          {/* <Header
            open={open}
            setOpen={setOpen}
            activeItem={activeItem}
            setRoute={setRoute}
            route={route}
          /> */}


          <Header/>

          {children}
        </>
      )}
    </>
  );
};
